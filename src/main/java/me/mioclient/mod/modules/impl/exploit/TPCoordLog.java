package me.mioclient.mod.modules.impl.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import me.mioclient.mod.commands.Command;
import me.mioclient.mod.modules.Category;
import me.mioclient.mod.modules.Module;
import me.mioclient.mod.modules.settings.Setting;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.math.Vec3d;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.HashMap;

public class TPCoordLog extends Module {

    private final Setting<Boolean> saveCoords =
            add(new Setting<>("SaveToFile", true));

    public TPCoordLog() {
        super("TPCoordLog", "New exploit.", Category.EXPLOIT);
    }

    private final HashMap<Entity, Vec3d> knownPlayers = new HashMap<>();
    private final HashMap<String, Vec3d> tpdPlayers = new HashMap<>();

    private int numTicks;
    private int numForgetTicks;

    @Override
    public void onUpdate() {

        if (numTicks >= 50) {
            numTicks = 0;

            for (Entity entity : mc.world.loadedEntityList) {

                if (entity instanceof EntityPlayer && !entity.getName().equals(mc.player.getName())) {

                    Vec3d playerPos = new Vec3d(entity.posX, entity.posY, entity.posZ);

                    if (knownPlayers.containsKey(entity)) {

                        if (Math.abs(knownPlayers.get(entity).distanceTo(playerPos)) > 50.0
                                && Math.abs(mc.player.getPositionVector().distanceTo(playerPos)) > 100.0
                                && (!tpdPlayers.containsKey(entity.getName())
                                || tpdPlayers.get(entity.getName()) != playerPos)) {

                            Command.sendMessage(ChatFormatting.WHITE + entity.getName() + ChatFormatting.GRAY + " has TP'd to " + ChatFormatting.WHITE + vectorToString(playerPos));
                            saveFile(vectorToString(playerPos), entity.getName());

                            knownPlayers.remove(entity);
                            tpdPlayers.put(entity.getName(), playerPos);
                        }
                    }
                    knownPlayers.put(entity, playerPos);
                }
            }
        }

        if (numForgetTicks >= 9000000) {
            tpdPlayers.clear();
        }

        ++numTicks;
        ++numForgetTicks;
    }

    private String vectorToString(Vec3d vector) {

        String builder = "(" +
                (int) Math.floor(vector.x) +
                ", " +
                (int) Math.floor(vector.z) +
                ")";

        return builder;
    }

    private void saveFile(String pos, String name) {

        if (saveCoords.getValue()) {

            try {
                File file = new File("./hvhlegend/loggedCoords.txt");
                file.getParentFile().mkdirs();

                PrintWriter writer = new PrintWriter(new FileWriter(file, true));

                String ip = !mc.isSingleplayer() ? mc.getCurrentServerData().serverIP : "singleplayer";

                writer.println("(Teleport) " + "IGN: " + name + " Pos: " + pos + "Server: " + ip);
                writer.close();

            } catch (Exception ignored) {

            }
        }
    }
}



